{"version":3,"sources":["serviceWorker.ts","models/TaskTypes.ts","components/button-click/ButtonClick.tsx","models/TaskData.ts","utils/NumberGenerator.ts","utils/TaskGenerator.ts","components/tasks-history/TasksHistory.tsx","models/TaskResultData.ts","components/app-main/AppMain.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskTypes","ButtonClick","props","className","onClick","text","disabled","isEnabled","TaskData","TaskType","TaskText","TaskAnswer","NumberGenerator","max","min","Math","floor","random","TaskGenerator","taskTypes","maxResult","type","Generate","length","this","GenerateTask","taskType","result","Plus","GenerateTaskPlus","Minus","GenerateTaskMinus","Multiplication","GenerateTaskMultiple","Error","sum1","sum2","TasksHistory","Tasks","filter","t","IsSuccess","map","i","key","Answer","TaskResultData","AppMain","observer","digitButtonEnabled","eraseButtonEnabled","nextButtonEnabled","answerButtonEnabled","solvedTasks","onDigitClick","value","clearAnswerDescription","tempAnswer","answer","toString","parseInt","onEraseClick","substr","onNextClick","types","plusType","push","minusType","multipleType","currentTaskData","GenerateRandomTask","onChangeMaxResult","arg","target","onAnswerClick","answerDescriptionRight","answerDescriptionWrong","onCheckedChanged","name","checked","onChange","style","width","height","React","Component","observable","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19b601c6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum TaskTypes {\r\n    Plus = 1,\r\n    Minus = 2,\r\n    Multiplication = 3\r\n}","import React from 'react';\r\nimport './ButtonClick.css';\r\n\r\nexport interface ButtonClickProps {\r\n    text: string;\r\n    onClick(value: string): void;\r\n    isEnabled: boolean;\r\n}\r\n\r\nconst ButtonClick: React.FC<ButtonClickProps> = (props) => {\r\n  return (\r\n    <button className='button-main' onClick={() => props.onClick(props.text)} disabled={!props.isEnabled}>{props.text}</button>\r\n  );\r\n}\r\n\r\nexport default ButtonClick;","import { TaskTypes } from \"./TaskTypes\";\r\n\r\nexport class TaskData {\r\n\r\n    constructor(public TaskType: TaskTypes, public TaskText: string, public TaskAnswer: number) {}\r\n    \r\n}","export class NumberGenerator {\r\n    \r\n    public static Generate(max: number, min: number = 0): number {\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n}","import { TaskData } from \"../models/TaskData\";\r\nimport { TaskTypes } from \"../models/TaskTypes\";\r\nimport { NumberGenerator } from \"./NumberGenerator\";\r\n\r\nexport class TaskGenerator {\r\n\r\n    public static GenerateRandomTask(taskTypes: TaskTypes[], maxResult: number): TaskData {        \r\n        let type = NumberGenerator.Generate(taskTypes.length*100, 1);\r\n        type = Math.floor(type/100);\r\n        if (type > taskTypes.length) type = taskTypes.length - 1;\r\n        return this.GenerateTask(taskTypes[type], maxResult);\r\n    }\r\n\r\n    public static GenerateTask(taskType: TaskTypes, maxResult: number): TaskData {\r\n        let result: TaskData;\r\n        switch (taskType) {\r\n            case TaskTypes.Plus:\r\n                result = this.GenerateTaskPlus(maxResult);\r\n                break;\r\n            case TaskTypes.Minus:\r\n                result = this.GenerateTaskMinus(maxResult);\r\n                break; \r\n            case TaskTypes.Multiplication:\r\n                    result = this.GenerateTaskMultiple(maxResult);\r\n                    break;         \r\n            default:\r\n                throw new Error(`Неустановленный тип операции [${taskType}]`);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    public static GenerateTaskPlus(maxResult: number) : TaskData {\r\n        let sum1 = NumberGenerator.Generate(maxResult, 1);\r\n        let sum2 = NumberGenerator.Generate(maxResult - sum1, 0);\r\n        return new TaskData(TaskTypes.Plus, `${sum1} + ${sum2}`, sum1 + sum2);\r\n    }\r\n\r\n\r\n    public static GenerateTaskMinus(maxResult: number) : TaskData {\r\n        let sum1 = NumberGenerator.Generate(maxResult, 1);\r\n        let sum2 = NumberGenerator.Generate(sum1, 0);\r\n        return new TaskData(TaskTypes.Plus, `${sum1} - ${sum2}`, sum1 - sum2);\r\n    }\r\n\r\n\r\n    public static GenerateTaskMultiple(maxResult: number) : TaskData {\r\n        let sum1 = NumberGenerator.Generate(maxResult/2, 1);\r\n        let sum2 = Math.floor(maxResult/sum1);\r\n        return new TaskData(TaskTypes.Plus, `${sum1} * ${sum2}`, sum1 * sum2);\r\n    }\r\n\r\n\r\n}","import React from 'react';\r\nimport { TaskResultData } from '../../models/TaskResultData';\r\n\r\nexport interface TasksHistoryProps {\r\n    Tasks: TaskResultData[]\r\n}\r\n\r\nconst TasksHistory: React.FC<TasksHistoryProps> = (props) => {\r\n  return (\r\n      <div>\r\n          <h3>Всего решено: {props.Tasks.filter(t => t.IsSuccess === true).length}</h3>\r\n          {props.Tasks.map((t, i) => <p key={i}>{`${t.TaskText} = ${t.Answer}`}</p>)}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default TasksHistory;","export class TaskResultData {\r\n\r\n    constructor(public IsSuccess: boolean, public TaskText: string, public Answer: number) {}\r\n}","import React from 'react';\r\nimport './AppMain.css';\r\nimport {observable} from 'mobx';\r\nimport {observer} from 'mobx-react';\r\nimport ButtonClick from '../button-click/ButtonClick';\r\nimport { TaskData } from '../../models/TaskData';\r\nimport { TaskGenerator } from '../../utils/TaskGenerator';\r\nimport { TaskTypes } from '../../models/TaskTypes';\r\nimport TasksHistory from '../tasks-history/TasksHistory';\r\nimport { TaskResultData } from '../../models/TaskResultData';\r\n\r\n@observer\r\nexport class AppMain extends React.Component {\r\n\r\n    @observable maxResult: number;\r\n    @observable answer: number | null;\r\n    @observable answerDescriptionRight: string;\r\n    @observable answerDescriptionWrong: string;\r\n    @observable currentTaskData: TaskData | null;\r\n\r\n    @observable plusType: boolean;\r\n    @observable minusType: boolean;\r\n    @observable multipleType: boolean;\r\n\r\n    digitButtonEnabled: boolean;\r\n    eraseButtonEnabled: boolean;\r\n    nextButtonEnabled: boolean;\r\n    answerButtonEnabled: boolean;\r\n    solvedTasks: TaskResultData[];\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.maxResult = 20;\r\n        this.answer = null;\r\n        this.answerDescriptionRight = \"\";\r\n        this.answerDescriptionWrong = \"\";\r\n        this.currentTaskData = null;\r\n\r\n        this.plusType = true;\r\n        this.minusType = true;\r\n        this.multipleType = true;\r\n\r\n        this.digitButtonEnabled = false;\r\n        this.eraseButtonEnabled = false;\r\n        this.nextButtonEnabled = true;\r\n        this.answerButtonEnabled = false;\r\n        this.solvedTasks = [];\r\n    }\r\n\r\n\r\n    onDigitClick = (value: string) => {\r\n        this.clearAnswerDescription();\r\n        let tempAnswer: string = this.answer != null ? this.answer.toString() : \"\";\r\n        tempAnswer += value;\r\n        this.answer = parseInt(tempAnswer);\r\n        if (this.answer >= 0) {\r\n            this.eraseButtonEnabled = true;\r\n            this.answerButtonEnabled = true;\r\n        }\r\n    }\r\n\r\n\r\n    onEraseClick = () => {\r\n        this.clearAnswerDescription();\r\n        let tempAnswer: string = this.answer != null ? this.answer.toString() : \"\";\r\n        if (tempAnswer.length > 0) {            \r\n            tempAnswer = tempAnswer.substr(0, tempAnswer.length - 1);\r\n            this.answer = tempAnswer.length > 0 ? parseInt(tempAnswer) : null;\r\n            if (this.answer === null) {\r\n                this.eraseButtonEnabled = false;\r\n                this.answerButtonEnabled = false;\r\n            }\r\n            else {\r\n                this.answerButtonEnabled = true;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    onNextClick = () => {\r\n        let types: TaskTypes[] = [];\r\n        if (this.plusType) types.push(TaskTypes.Plus);\r\n        if (this.minusType) types.push(TaskTypes.Minus);\r\n        if (this.multipleType) types.push(TaskTypes.Multiplication);\r\n        this.currentTaskData = TaskGenerator.GenerateRandomTask(types, this.maxResult);\r\n        this.digitButtonEnabled = true;\r\n        this.eraseButtonEnabled = false;\r\n        this.answerButtonEnabled = false;\r\n        this.nextButtonEnabled = false;\r\n        this.answer = null;\r\n        this.clearAnswerDescription();\r\n    }\r\n\r\n\r\n    onChangeMaxResult = (arg: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.maxResult = parseInt(arg.target.value);\r\n    }\r\n\r\n\r\n    onAnswerClick = () => {\r\n        if (this.currentTaskData != null) {\r\n            if (this.answer === this.currentTaskData.TaskAnswer) {\r\n                this.answerDescriptionRight = `Правильно!  ${this.currentTaskData.TaskText} = ${this.answer}`;\r\n                this.solvedTasks.push(new TaskResultData(true, this.currentTaskData.TaskText, this.currentTaskData.TaskAnswer));\r\n                this.digitButtonEnabled = false;\r\n                this.eraseButtonEnabled = false;\r\n                this.nextButtonEnabled = true;\r\n            }\r\n            else {\r\n                this.answerDescriptionWrong = `Неправильно!  ${this.currentTaskData.TaskText} ≠ ${this.answer}`;\r\n            }\r\n        }\r\n        this.answerButtonEnabled = false;\r\n    }\r\n\r\n\r\n    onCheckedChanged = (arg: React.ChangeEvent<HTMLInputElement>) => {\r\n        switch (arg.target.name) {\r\n            case \"plus\":\r\n                this.plusType = arg.target.checked;\r\n                break;\r\n            case \"minus\":\r\n                this.minusType = arg.target.checked;\r\n                break;\r\n            case \"multiple\":\r\n                this.multipleType = arg.target.checked;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    clearAnswerDescription = () => {\r\n        if (this.answerDescriptionRight !== \"\") {\r\n            this.answerDescriptionRight = \"\";\r\n        }\r\n        if (this.answerDescriptionWrong !== \"\") {\r\n            this.answerDescriptionWrong = \"\";\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row-flex top\">\r\n                <div className=\"container-flex main-area\">\r\n                    <div>\r\n                        <div className=\"row-flex\">\r\n                            <span>Максимум:&nbsp;</span>\r\n                            <input type=\"number\" value={this.maxResult} onChange={this.onChangeMaxResult} style={{ width: 50 }}/>\r\n                        </div>\r\n                        <div className=\"column-flex\">\r\n                            <div className=\"row-flex\">\r\n                                <input type=\"checkbox\" name=\"plus\" checked={this.plusType} onChange={this.onCheckedChanged} />\r\n                                <span>+ (сложение)</span>\r\n                            </div>\r\n                            <div className=\"row-flex\">\r\n                                <input type=\"checkbox\" name=\"minus\" checked={this.minusType} onChange={this.onCheckedChanged} />\r\n                                <span>- (вычитание)</span>\r\n                            </div>\r\n                            <div className=\"row-flex\">\r\n                                <input type=\"checkbox\" name=\"multiple\" checked={this.multipleType} onChange={this.onCheckedChanged} />\r\n                                <span>* (умножение)</span>\r\n                            </div>\r\n                        </div>\r\n                        <ButtonClick text=\"Начать\" onClick={this.onNextClick} isEnabled={true}></ButtonClick>\r\n                        <div className=\"column-flex center\" style={{ height: '30vh' }}>\r\n                            <span className=\"task-text\">{this.currentTaskData != null ? this.currentTaskData.TaskText : \"\"}</span>\r\n                            <span className=\"task-answer\">{this.answer}</span>\r\n                            <div className=\"task-answer-description\">                                \r\n                                <span className=\"right\">{this.answerDescriptionRight}</span>\r\n                                <span className=\"wrong\">{this.answerDescriptionWrong}</span>\r\n                            </div>\r\n                        </div>                        \r\n                        <div className=\"row-flex\">\r\n                            <ButtonClick text=\"0\" onClick={this.onDigitClick} isEnabled={this.digitButtonEnabled}></ButtonClick>\r\n                            <ButtonClick text=\"1\" onClick={this.onDigitClick} isEnabled={this.digitButtonEnabled}></ButtonClick>\r\n                            <ButtonClick text=\"2\" onClick={this.onDigitClick} isEnabled={this.digitButtonEnabled}></ButtonClick>\r\n                            <ButtonClick text=\"3\" onClick={this.onDigitClick} isEnabled={this.digitButtonEnabled}></ButtonClick>\r\n                        </div>\r\n                        <div className=\"row-flex\">\r\n                            <ButtonClick text=\"4\" onClick={this.onDigitClick} isEnabled={this.digitButtonEnabled}></ButtonClick>\r\n                            <ButtonClick text=\"5\" onClick={this.onDigitClick} isEnabled={this.digitButtonEnabled}></ButtonClick>\r\n                            <ButtonClick text=\"6\" onClick={this.onDigitClick} isEnabled={this.digitButtonEnabled}></ButtonClick>\r\n                        </div>\r\n                        <div className=\"row-flex\">\r\n                            <ButtonClick text=\"7\" onClick={this.onDigitClick} isEnabled={this.digitButtonEnabled}></ButtonClick>\r\n                            <ButtonClick text=\"8\" onClick={this.onDigitClick} isEnabled={this.digitButtonEnabled}></ButtonClick>\r\n                            <ButtonClick text=\"9\" onClick={this.onDigitClick} isEnabled={this.digitButtonEnabled}></ButtonClick>\r\n                            <ButtonClick text=\"<\" onClick={this.onEraseClick} isEnabled={this.eraseButtonEnabled}></ButtonClick>\r\n                        </div>\r\n                        <div className=\"row-flex\">\r\n                            <ButtonClick text=\"Ответить\" onClick={this.onAnswerClick} isEnabled={this.answerButtonEnabled}></ButtonClick>\r\n                            <ButtonClick text=\"Следующий\" onClick={this.onNextClick} isEnabled={this.nextButtonEnabled}></ButtonClick>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <TasksHistory Tasks={this.solvedTasks}></TasksHistory>\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n        );\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { AppMain } from './components/app-main/AppMain';\n\nReactDOM.render(<AppMain />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}